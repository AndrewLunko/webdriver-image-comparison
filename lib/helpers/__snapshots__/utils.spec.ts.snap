// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` calculateDprData should multiple all number values by the dpr value 1`] = `
Object {
  "1": 6,
  "a": 2,
  "a1": 18,
  "b": 4,
  "bool": true,
  "string": "string",
}
`;

exports[` checkAndroidChromeDriverScreenshot should return false when Android and nativeWebscreenshot true is provided 1`] = `false`;

exports[` checkAndroidChromeDriverScreenshot should return false when iOS and nativeWebscreenshot false is provided 1`] = `false`;

exports[` checkAndroidChromeDriverScreenshot should return false when iOS and nativeWebscreenshot true is provided 1`] = `false`;

exports[` checkAndroidChromeDriverScreenshot should return false when no platform name is provided 1`] = `false`;

exports[` checkAndroidChromeDriverScreenshot should return true when Android and nativeWebscreenshot false is provided  1`] = `true`;

exports[` checkAndroidNativeWebScreenshot should return false when Android and nativeWebscreenshot false is provided 1`] = `false`;

exports[` checkAndroidNativeWebScreenshot should return false when iOS and nativeWebscreenshot false is provided 1`] = `false`;

exports[` checkAndroidNativeWebScreenshot should return false when iOS and nativeWebscreenshot true is provided 1`] = `false`;

exports[` checkAndroidNativeWebScreenshot should return false when no platform name is provided 1`] = `false`;

exports[` checkAndroidNativeWebScreenshot should return true when Android and nativeWebscreenshot true is provided  1`] = `true`;

exports[` checkIsAndroid should return false when a platform name is provided that is not accepted 1`] = `false`;

exports[` checkIsAndroid should return false when no platform name is provided 1`] = `false`;

exports[` checkIsAndroid should return true when a valid platform name is provided 1`] = `true`;

exports[` checkIsIos should return false when a platform name is provided that is not accepted 1`] = `false`;

exports[` checkIsIos should return false when no platform name is provided 1`] = `false`;

exports[` checkIsIos should return true when a valid platform name is provided 1`] = `true`;

exports[` checkIsMobile should return false when no platform name is provided 1`] = `false`;

exports[` checkIsMobile should return true when a platform name is provided 1`] = `true`;

exports[` checkTestInBrowser should return false when no browser name is provided 1`] = `false`;

exports[` checkTestInBrowser should return true when a browser name is provided 1`] = `true`;

exports[` checkTestInMobileBrowser should return false when a plaform but no browser name is provided 1`] = `false`;

exports[` checkTestInMobileBrowser should return false when no platform name is provided 1`] = `false`;

exports[` checkTestInMobileBrowser should return true when a plaform and a browser name is provided 1`] = `true`;

exports[` formatFileName should format a string for mobile app 1`] = `"theTag-app-2-1400x900.png"`;

exports[` formatFileName should format a string for mobile browser 1`] = `"theTag-chrome-2-1400x900.png"`;

exports[` formatFileName should format a string with all options provided 1`] = `"chrome-2-768-chrome-latest-chrome-name-theTag-1366.png"`;

exports[` getAddressBarShadowPadding should return 0 when this is a check for Android with a native screenshot but without adding a shadow padding 1`] = `0`;

exports[` getAddressBarShadowPadding should return 0 when this is a check for a desktop browser 1`] = `0`;

exports[` getAddressBarShadowPadding should return 0 when this is a check for an Android app 1`] = `0`;

exports[` getAddressBarShadowPadding should return 0 when this is a check for an iOS app 1`] = `0`;

exports[` getAddressBarShadowPadding should return 0 when this is a check for iOS but without adding a shadow padding 1`] = `0`;

exports[` getAddressBarShadowPadding should return 6 when this is a check for Android with a native screenshot and adding a shadow padding 1`] = `6`;

exports[` getAddressBarShadowPadding should return 6 when this is a check for iOS and adding a shadow padding 1`] = `6`;

exports[` getAndCreatePath should create the folder and return the folder name for a browser 1`] = `false`;

exports[` getAndCreatePath should create the folder and return the folder name for a browser 2`] = `true`;

exports[` getAndCreatePath should create the folder and return the folder name for a browser that needs to have its own folder 1`] = `false`;

exports[` getAndCreatePath should create the folder and return the folder name for a browser that needs to have its own folder 2`] = `true`;

exports[` getAndCreatePath should create the folder and return the folder name for a device that needs to have its own folder 1`] = `false`;

exports[` getAndCreatePath should create the folder and return the folder name for a device that needs to have its own folder 2`] = `true`;

exports[` getScreenshotSize should get the screenshot size of a screenshot string with DRP 2 1`] = `
Object {
  "height": 768,
  "width": 1366,
}
`;

exports[` getScreenshotSize should get the screenshot size of a screenshot string with the default DPR 1`] = `
Object {
  "height": 1536,
  "width": 2732,
}
`;

exports[` getToolBarShadowPadding should return 0 when this is a check for Android browser and adding a shadow padding 1`] = `0`;

exports[` getToolBarShadowPadding should return 0 when this is a check for a desktop browser 1`] = `0`;

exports[` getToolBarShadowPadding should return 0 when this is a check for an Android app 1`] = `0`;

exports[` getToolBarShadowPadding should return 0 when this is a check for an Android app with adding a shadow padding 1`] = `0`;

exports[` getToolBarShadowPadding should return 0 when this is a check for an iOS app 1`] = `0`;

exports[` getToolBarShadowPadding should return 0 when this is a check for an iOS app with adding a shadow padding 1`] = `0`;

exports[` getToolBarShadowPadding should return 6 when this is a check for iOS browser and adding a shadow padding 1`] = `6`;
